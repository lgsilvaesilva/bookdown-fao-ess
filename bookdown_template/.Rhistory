#'  FAOSTAT Production subdomains.
#'
# ignoring well-known warnings
options(warn=-1, digits = 1, scipen = 999999999)
# Loading libraries
suppressMessages({
library(faosws)
library(faoswsUtil)
library(faoswsFlag)
library(plyr)
library(dplyr)
library(data.table)
library(stringr)
})
# setting the environment
if(CheckDebug()){
library(faoswsModules)
SETT <- ReadSettings("~/R_utils/Francy-test/sws.yml")
SetClientFiles(SETT[["certdir"]])
GetTestEnvironment(baseUrl = SETT[["server"]], token = SETT[["token"]])
Sys.setenv(R_SWS_SHARE_PATH = SETT[["share"]])
GetTestEnvironment(baseUrl = SETT[["server"]], token = SETT[["token"]])
}
# user defined parameters -------------------------------------------------------------------------------------------------
faostat_domain <- swsContext.computationParams$faostat_domain
indicator <- swsContext.computationParams$indicator
granularity <- swsContext.computationParams$granularity
if (granularity %in% "IET"){
g <- c('Area', 'Item', 'Element', 'Year')
collapsing_group <- 'Countries within regions'
}
if (granularity %in% "ET"){
g <- c('Area', 'Element', 'Year')
collapsing_group <- 'Countries and Commodities within regions'
}
region_code <- swsContext.computationParams$region
commodity_group <- swsContext.computationParams$by_commodity_group
gnoring well-known warnings
options(warn=-1, digits = 1, scipen = 999999999)
# Loading libraries
suppressMessages({
library(faosws)
library(faoswsUtil)
library(faoswsFlag)
library(plyr)
library(dplyr)
library(data.table)
library(stringr)
})
# setting the environment
if(CheckDebug()){
library(faoswsModules)
SETT <- ReadSettings("~/R_utils/Francy-test/sws.yml")
SetClientFiles(SETT[["certdir"]])
GetTestEnvironment(baseUrl = SETT[["server"]], token = SETT[["token"]])
Sys.setenv(R_SWS_SHARE_PATH = SETT[["share"]])
GetTestEnvironment(baseUrl = SETT[["server"]], token = SETT[["token"]])
}
SETT <- ReadSettings("~/R_utils/Francy-test/sws.yml")
SetClientFiles(SETT[["certdir"]])
GetTestEnvironment(baseUrl = SETT[["server"]], token = SETT[["token"]])
packageVersion('curl')
faosws:::GetRestCall
GetTestEnvironment(baseUrl = SETT[["server"]], token = SETT[["token"]])
debug(GetTestEnvironment)
GetTestEnvironment(baseUrl = SETT[["server"]], token = SETT[["token"]])
GetTestEnvironment(baseUrl = SETT[["server"]], token = SETT[["token"]])
undebug(GetTestEnvironment)
debug(faosws:::GetRestCall)
GetTestEnvironment(baseUrl = SETT[["server"]], token = SETT[["token"]])
undebug(faosws:::GetRestCall)
debug(curl_fetch_memory)
debug(faosws:::curl_fetch_memory)
debug(curl:::curl_fetch_memory)
GetTestEnvironment(baseUrl = SETT[["server"]], token = SETT[["token"]])
GetTestEnvironment(baseUrl = SETT[["server"]], token = SETT[["token"]])
.Call(R_curl_fetch_memory, url, handle, nonblocking)
nonblocking
handle
undebug(curl:::curl_fetch_memory)
debug(faosws:::GetRestCall)
GetTestEnvironment(baseUrl = SETT[["server"]], token = SETT[["token"]])
path.expand(.swsenv$swsContext.clientCertificate
)
path.expand(.swsenv$swsContext.clientKey)
curl::handle_setheaders(ch, .list = list(Accept = "application/json",
`Content-Type` = "application/json"))
withCallingHandlers({
if (Sys.info()["sysname"] == "Darwin") {
curl::handle_setopt(ch, verbose = FALSE, noproxy = .swsenv$swsContext.noProxy,
ssl_verifypeer = FALSE, sslcert = path.expand(.swsenv$swsContext.clientP12),
sslcertpasswd = .swsenv$swsContext.p12Password,
ssl_verifyhost = 2)
}
else {
curl::handle_setopt(ch, verbose = FALSE, noproxy = .swsenv$swsContext.noProxy,
ssl_verifypeer = FALSE, sslcert = path.expand(.swsenv$swsContext.clientCertificate),
sslkey = path.expand(.swsenv$swsContext.clientKey),
ssl_verifyhost = 2)
}
response <- curl_fetch_memory(url, handle = ch)
}
, SSL_CONNECT_ERROR = function(e) {
stop("Incorrect certificates. Either use 'SetClientFiles' or put the correct certificates in ",
dirname(.swsenv$swsContext.clientCertificate), call. = FALSE)
})
curl::handle_setheaders(ch, .list = list(Accept = "application/json",
`Content-Type` = "application/json"))
withCallingHandlers({
if (Sys.info()["sysname"] == "Darwin") {
curl::handle_setopt(ch, verbose = FALSE, noproxy = .swsenv$swsContext.noProxy,
ssl_verifypeer = FALSE, sslcert = path.expand(.swsenv$swsContext.clientP12),
sslcertpasswd = .swsenv$swsContext.p12Password,
ssl_verifyhost = 2)
}
else {
curl::handle_setopt(ch, verbose = FALSE, noproxy = .swsenv$swsContext.noProxy,
ssl_verifypeer = FALSE, sslcert = path.expand(.swsenv$swsContext.clientCertificate),
sslkey = path.expand(.swsenv$swsContext.clientKey),
ssl_verifyhost = 2)
}
response <- curl_fetch_memory(url, handle = ch)
)
# ignoring well-known warnings
options(warn=-1, digits = 1, scipen = 999999999)
# Loading libraries
suppressMessages({
library(faosws)
library(faoswsUtil)
library(faoswsFlag)
library(plyr)
library(dplyr)
library(data.table)
library(stringr)
})
# setting the environment
if(CheckDebug()){
library(faoswsModules)
SETT <- ReadSettings("~/R_utils/Francy-test/sws.yml")
SetClientFiles(SETT[["certdir"]])
GetTestEnvironment(baseUrl = SETT[["server"]], token = SETT[["token"]])
Sys.setenv(R_SWS_SHARE_PATH = SETT[["share"]])
GetTestEnvironment(baseUrl = SETT[["server"]], token = SETT[["token"]])
}
GetTestEnvironment(baseUrl = SETT[["server"]], token = SETT[["token"]])
InitializeSecurityContext
curl::curl_fetch_memory("https://rud.is/")
GetTestEnvironment(baseUrl = SETT[["server"]], token = SETT[["token"]])
SETT[["server"]]
SETT[["token"]]
SETT
# Loading libraries
suppressMessages({
library(faosws)
library(faoswsUtil)
library(faoswsFlag)
})
if(CheckDebug()){
library(faoswsModules)
SETTINGS = ReadSettings("~/R_utils/Francy-test/sws.yml")
Sys.setenv("R_SWS_SHARE_PATH" = SETTINGS[["share"]])
R_SWS_SHARE_PATH = SETTINGS[["share"]]
SetClientFiles(SETTINGS[["certdir"]])
GetTestEnvironment(baseUrl = SETTINGS[["server"]],
GetTestEnvironment(baseUrl = SETTINGS[["server"]],
token = SETTINGS[["token"]])
if(CheckDebug()){
library(faoswsModules)
SETTINGS = ReadSettings("~/R_utils/Francy-test/sws.yml")
Sys.setenv("R_SWS_SHARE_PATH" = SETTINGS[["share"]])
R_SWS_SHARE_PATH = SETTINGS[["share"]]
SetClientFiles(SETTINGS[["certdir"]])
GetTestEnvironment(baseUrl = SETTINGS[["server"]],
token = SETTINGS[["token"]])
}
# Loading libraries
suppressMessages({
library(faosws)
library(faoswsUtil)
library(faoswsFlag)
})
if(CheckDebug()){
library(faoswsModules)
SETTINGS = ReadSettings("~/R_utils/Francy-test/sws.yml")
Sys.setenv("R_SWS_SHARE_PATH" = SETTINGS[["share"]])
R_SWS_SHARE_PATH = SETTINGS[["share"]]
SetClientFiles(SETTINGS[["certdir"]])
GetTestEnvironment(baseUrl = SETTINGS[["server"]],
token = SETTINGS[["token"]])
}
SETTINGS
Sys.getenv()
Sys.getenv('HOME')
GetTestEnvironment
## Only run examples in interactive R sessions
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
checkboxGroupInput('in1', 'Check some letters', choices = head(LETTERS)),
selectizeInput('in2', 'Select a state', choices = state.name),
plotOutput('plot')
)
server <- function(input, output) {
output$plot <- renderPlot({
validate(
need(input$in1, 'Check at least one letter!'),
need(input$in2 != '', 'Please choose a state.')
)
plot(1:10, main = paste(c(input$in1, input$in2), collapse = ', '))
})
}
shinyApp(ui, server)
}
require(shiny)
## Only run examples in interactive R sessions
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
checkboxGroupInput('in1', 'Check some letters', choices = head(LETTERS)),
selectizeInput('in2', 'Select a state', choices = state.name),
plotOutput('plot')
)
server <- function(input, output) {
output$plot <- renderPlot({
validate(
need(input$in1, 'Check at least one letter!'),
need(input$in2 != '', 'Please choose a state.')
)
plot(1:10, main = paste(c(input$in1, input$in2), collapse = ', '))
})
}
shinyApp(ui, server)
}
# XXX: what to do with self-reported transactions? Some of these
# are actually self reported, while others (see China) are not.
# XXX: some imputations are done after having already imputed (somehow)
# missing values: this means that the indicators generated to impute
# incorporates imputations...
# XXX: maybe it's better to mark outliers as missing values, otherwise the
# outliers will be used to calculate series used in imputations (see, e.g.,
# the hierarchical unit value)
# If `TEST_ALL_MAPPED` is set to TRUE the trademap_manually_mapped.rds
# will be used and as result all codes that were found to be unmapped
# with the trademap.rds will be mapped (as a test, not because they
# should really be mapped as trademap_manually_mapped.rds says).
TEST_ALL_MAPPED <- TRUE
# TODO: haslength should be removed in the mapping process of tldata.
# It is kept now as required when displaying actual codes.
# NOTE: geonom codes are converted to FAL and then to M49 as
# there is no direct mapping from geonom -> M49 in SWS; tldata
# is converted to FAL then to M49 in order to keep the destination
# list compatible with esdata.
# Loading libraries
suppressMessages({
library(faosws)
library(faoswsUtil)
library(faoswsFlag)
})
if(CheckDebug()){
library(faoswsModules)
SETTINGS = ReadSettings("~/R_utils/Francy-test/sws.yml")
Sys.setenv("R_SWS_SHARE_PATH" = SETTINGS[["share"]])
R_SWS_SHARE_PATH = SETTINGS[["share"]]
SetClientFiles(SETTINGS[["certdir"]])
GetTestEnvironment(baseUrl = SETTINGS[["server"]],
token = SETTINGS[["token"]])
}
library("faosws")
library("data.table")
library("dplyr")
sapply(dir('~/projects/Fisheries_proj/fisheriesTrade/R', full.names = TRUE), source)
# Ornamental fish needs not to be imputed
no_imputation <- "0301"
LOCAL <- TRUE
REPORTER <- "eurostat" # "all", "eurostat", "unsd", or any single M49 code
# This will globally assign the data
get_working_data(.reporter = REPORTER, .local = LOCAL)
REPORTER <- "170" # "all", "eurostat", "unsd", or any single M49 code
# This will globally assign the data
get_working_data(.reporter = REPORTER, .local = LOCAL)
# XXX: what to do with self-reported transactions? Some of these
# are actually self reported, while others (see China) are not.
# XXX: some imputations are done after having already imputed (somehow)
# missing values: this means that the indicators generated to impute
# incorporates imputations...
# XXX: maybe it's better to mark outliers as missing values, otherwise the
# outliers will be used to calculate series used in imputations (see, e.g.,
# the hierarchical unit value)
# If `TEST_ALL_MAPPED` is set to TRUE the trademap_manually_mapped.rds
# will be used and as result all codes that were found to be unmapped
# with the trademap.rds will be mapped (as a test, not because they
# should really be mapped as trademap_manually_mapped.rds says).
TEST_ALL_MAPPED <- TRUE
# TODO: haslength should be removed in the mapping process of tldata.
# It is kept now as required when displaying actual codes.
# NOTE: geonom codes are converted to FAL and then to M49 as
# there is no direct mapping from geonom -> M49 in SWS; tldata
# is converted to FAL then to M49 in order to keep the destination
# list compatible with esdata.
# Loading libraries
suppressMessages({
library(faosws)
library(faoswsUtil)
library(faoswsFlag)
})
if(CheckDebug()){
library(faoswsModules)
SETTINGS = ReadSettings("~/R_utils/Francy-test/sws.yml")
Sys.setenv("R_SWS_SHARE_PATH" = SETTINGS[["share"]])
R_SWS_SHARE_PATH = SETTINGS[["share"]]
SetClientFiles(SETTINGS[["certdir"]])
GetTestEnvironment(baseUrl = SETTINGS[["server"]],
token = SETTINGS[["token"]])
}
library("faosws")
library("data.table")
library("dplyr")
sapply(dir('~/projects/Fisheries_proj/fisheriesTrade/R', full.names = TRUE), source)
# Ornamental fish needs not to be imputed
no_imputation <- "0301"
LOCAL <- TRUE
REPORTER <- "170" # "all", "eurostat", "unsd", or any single M49 code
# test case EU: 001 (France)
# test case TL: 170 (Colombia)
# This will globally assign the data
get_working_data(.reporter = REPORTER, .local = LOCAL)
debug(get_working_data)
# This will globally assign the data
get_working_data(.reporter = REPORTER, .local = LOCAL)
source('~/projects/Fisheries_proj/fisheriesTrade/R/get_working_data.R')
# This will globally assign the data
get_working_data(.reporter = REPORTER, .local = LOCAL)
# XXX: what to do with self-reported transactions? Some of these
# are actually self reported, while others (see China) are not.
# XXX: some imputations are done after having already imputed (somehow)
# missing values: this means that the indicators generated to impute
# incorporates imputations...
# XXX: maybe it's better to mark outliers as missing values, otherwise the
# outliers will be used to calculate series used in imputations (see, e.g.,
# the hierarchical unit value)
# If `TEST_ALL_MAPPED` is set to TRUE the trademap_manually_mapped.rds
# will be used and as result all codes that were found to be unmapped
# with the trademap.rds will be mapped (as a test, not because they
# should really be mapped as trademap_manually_mapped.rds says).
TEST_ALL_MAPPED <- TRUE
# TODO: haslength should be removed in the mapping process of tldata.
# It is kept now as required when displaying actual codes.
# NOTE: geonom codes are converted to FAL and then to M49 as
# there is no direct mapping from geonom -> M49 in SWS; tldata
# is converted to FAL then to M49 in order to keep the destination
# list compatible with esdata.
# Loading libraries
suppressMessages({
library(faosws)
library(faoswsUtil)
library(faoswsFlag)
})
if(CheckDebug()){
library(faoswsModules)
SETTINGS = ReadSettings("~/R_utils/Francy-test/sws.yml")
Sys.setenv("R_SWS_SHARE_PATH" = SETTINGS[["share"]])
R_SWS_SHARE_PATH = SETTINGS[["share"]]
SetClientFiles(SETTINGS[["certdir"]])
GetTestEnvironment(baseUrl = SETTINGS[["server"]],
token = SETTINGS[["token"]])
}
library("faosws")
library("data.table")
library("dplyr")
sapply(dir('~/projects/Fisheries_proj/fisheriesTrade/R', full.names = TRUE), source)
# Ornamental fish needs not to be imputed
no_imputation <- "0301"
LOCAL <- TRUE
REPORTER <- "eurostat" # "all", "eurostat", "unsd", or any single M49 code
# This will globally assign the data
get_working_data(.reporter = REPORTER, .local = LOCAL)
REPORTER <- "unsd" # "all", "eurostat", "unsd", or any single M49 code
# This will globally assign the data
get_working_data(.reporter = REPORTER, .local = LOCAL)
gc(reset = T)
# XXX: what to do with self-reported transactions? Some of these
# are actually self reported, while others (see China) are not.
# XXX: some imputations are done after having already imputed (somehow)
# missing values: this means that the indicators generated to impute
# incorporates imputations...
# XXX: maybe it's better to mark outliers as missing values, otherwise the
# outliers will be used to calculate series used in imputations (see, e.g.,
# the hierarchical unit value)
# If `TEST_ALL_MAPPED` is set to TRUE the trademap_manually_mapped.rds
# will be used and as result all codes that were found to be unmapped
# with the trademap.rds will be mapped (as a test, not because they
# should really be mapped as trademap_manually_mapped.rds says).
TEST_ALL_MAPPED <- TRUE
# TODO: haslength should be removed in the mapping process of tldata.
# It is kept now as required when displaying actual codes.
# NOTE: geonom codes are converted to FAL and then to M49 as
# there is no direct mapping from geonom -> M49 in SWS; tldata
# is converted to FAL then to M49 in order to keep the destination
# list compatible with esdata.
# Loading libraries
suppressMessages({
library(faosws)
library(faoswsUtil)
library(faoswsFlag)
})
if(CheckDebug()){
library(faoswsModules)
SETTINGS = ReadSettings("~/R_utils/Francy-test/sws.yml")
Sys.setenv("R_SWS_SHARE_PATH" = SETTINGS[["share"]])
R_SWS_SHARE_PATH = SETTINGS[["share"]]
SetClientFiles(SETTINGS[["certdir"]])
GetTestEnvironment(baseUrl = SETTINGS[["server"]],
token = SETTINGS[["token"]])
}
library("faosws")
library("data.table")
library("dplyr")
sapply(dir('~/projects/Fisheries_proj/fisheriesTrade/R', full.names = TRUE), source)
# Ornamental fish needs not to be imputed
no_imputation <- "0301"
LOCAL <- TRUE
REPORTER <- "unsd" # "all", "eurostat", "unsd", or any single M49 code
# test case EU: 001 (France)
# test case TL: 170 (Colombia)
# This will globally assign the data
get_working_data(.reporter = REPORTER, .local = LOCAL)
# XXX: what to do with self-reported transactions? Some of these
# are actually self reported, while others (see China) are not.
# XXX: some imputations are done after having already imputed (somehow)
# missing values: this means that the indicators generated to impute
# incorporates imputations...
# XXX: maybe it's better to mark outliers as missing values, otherwise the
# outliers will be used to calculate series used in imputations (see, e.g.,
# the hierarchical unit value)
# If `TEST_ALL_MAPPED` is set to TRUE the trademap_manually_mapped.rds
# will be used and as result all codes that were found to be unmapped
# with the trademap.rds will be mapped (as a test, not because they
# should really be mapped as trademap_manually_mapped.rds says).
TEST_ALL_MAPPED <- TRUE
# TODO: haslength should be removed in the mapping process of tldata.
# It is kept now as required when displaying actual codes.
# NOTE: geonom codes are converted to FAL and then to M49 as
# there is no direct mapping from geonom -> M49 in SWS; tldata
# is converted to FAL then to M49 in order to keep the destination
# list compatible with esdata.
# Loading libraries
suppressMessages({
library(faosws)
library(faoswsUtil)
library(faoswsFlag)
})
if(CheckDebug()){
library(faoswsModules)
SETTINGS = ReadSettings("~/R_utils/Francy-test/sws.yml")
Sys.setenv("R_SWS_SHARE_PATH" = SETTINGS[["share"]])
R_SWS_SHARE_PATH = SETTINGS[["share"]]
SetClientFiles(SETTINGS[["certdir"]])
GetTestEnvironment(baseUrl = SETTINGS[["server"]],
token = SETTINGS[["token"]])
}
library("faosws")
library("data.table")
library("dplyr")
sapply(dir('~/projects/Fisheries_proj/fisheriesTrade/R', full.names = TRUE), source)
# Ornamental fish needs not to be imputed
no_imputation <- "0301"
LOCAL <- TRUE
REPORTER <- "unsd" # "all", "eurostat", "unsd", or any single M49 code
# test case EU: 001 (France)
# test case TL: 170 (Colombia)
debug(get_working_data)
# This will globally assign the data
get_working_data(.reporter = REPORTER, .local = LOCAL)
Q
debug(download_sws_trade_data)
# This will globally assign the data
get_working_data(.reporter = REPORTER, .local = LOCAL)
dts
sws_trade_dt_name
trade_years
names(trade_years)
names(tradedata)
names(tradedata$`2000`)
dim(tradedata$`2000`)
scales::comma_format(21183497)
scales::comma_format
scales::comma_format('21183497')
scales::comma_format()(21183497)
Q
# This will globally assign the data
get_working_data(.reporter = REPORTER, .local = LOCAL)
names(tradedata)
dim(tradedata$`2001`)
dim(tradedata$`2000`)
names(tradedata)
names(tradedata)
sapply(tradedata, nrow)
sapply(tradedata, nrow)
setwd("~/R_utils")
setwd("~/R_utils/bookdown_template")
.packages()
.packages()
180/40
SETTINGS = ReadSettings("~/R_utils/Francy-test/sws.yml")
suppressMessages({
library(faosws)
library(faoswsUtil)
library(faoswsFlag)
})
library(faoswsModules)
SETTINGS = ReadSettings("~/R_utils/Francy-test/sws.yml")
SETTINGS
